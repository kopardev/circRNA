{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"circRNA DAQ Pipeline DAQ = D etection A nnotation Q uantification Description This circularRNA detection pipeline uses the following tools in parallel to detect, annotate and quantify circRNAs: CircExplorer2 1 CIRI2 2 CLEAR 3 References 1 Zhang XO , Dong R , Zhang Y, Zhang JL, Luo Z, Zhang J, Chen LL, Yang L. Diverse alternative back-splicing and alternative splicing landscape of circular RNAs. Genome Res , 2016, 26:1277-1287 doi:10.1101/gr.202895.115 2 Yuan Gao, Jinyang Zhang and Fangqing Zhao. Circular RNA identification based on multiple seed matching. Briefings in Bioinformatics (2017) doi: 10.1093/bib/bbx014. 3 Ma XK, Wang MR, Liu CX, Dong R, Carmichael GG, Chen LL and Yang L. A CLEAR pipeline for direct comparison of circular and linear RNA expression. 2019, bioRxiv doi: 10.1101/668657","title":"Home"},{"location":"#circrna-daq-pipeline","text":"DAQ = D etection A nnotation Q uantification","title":"circRNA DAQ  Pipeline"},{"location":"#description","text":"This circularRNA detection pipeline uses the following tools in parallel to detect, annotate and quantify circRNAs: CircExplorer2 1 CIRI2 2 CLEAR 3","title":"Description"},{"location":"#references","text":"1 Zhang XO , Dong R , Zhang Y, Zhang JL, Luo Z, Zhang J, Chen LL, Yang L. Diverse alternative back-splicing and alternative splicing landscape of circular RNAs. Genome Res , 2016, 26:1277-1287 doi:10.1101/gr.202895.115 2 Yuan Gao, Jinyang Zhang and Fangqing Zhao. Circular RNA identification based on multiple seed matching. Briefings in Bioinformatics (2017) doi: 10.1093/bib/bbx014. 3 Ma XK, Wang MR, Liu CX, Dong R, Carmichael GG, Chen LL and Yang L. A CLEAR pipeline for direct comparison of circular and linear RNA expression. 2019, bioRxiv doi: 10.1101/668657","title":"References"},{"location":"flowchart/","text":"circRNA DAQ Pipeline Flowchart for v0.3.3 :","title":"Flowchart"},{"location":"flowchart/#circrna-daq-pipeline","text":"Flowchart for v0.3.3 :","title":"circRNA DAQ Pipeline"},{"location":"references/","text":"circRNA DAQ Pipeline The reference sequences comprises of the host genome and the viral genomes. Fasta hg38 genome build is chosen to represent human (host). Human ribosomal sequences ( 45S, 5S ) are downloaded from NCBI. hg38 was masked for rRNA sequence and 45S and 5S sequences from NCBI are appended as separate chromosomes. The following viral sequences were appended to the rRNA masked hg38 reference: RefSeq Sequence RefSeq assembly accession Notes NC_007605.1 GCF_002402265.1 Human gammaherpesvirus 4 (Epstein-Barr virus) NC_000898.1 GCF_000846365.1 Human betaherpesvirus 6B NC_001664.4 GCF_000845685.2 Human betaherpesvirus 6A NC_001716.2 GCF_000848125.1 Human betaherpesvirus 7 NC_006273.2 GCF_000845245.1 Human betaherpesvirus 5 NC_009333.1 GCF_000838265.1 Human gammaherpesvirus 8 NC_045512.2 GCF_009858895.2 Severe acute respiratory syndrome-related coronavirus MN485971.1 xx HIV from Belgium ... GTF is hand curated Location: The entire resource bundle is available at /data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC on biowulf. This location also have additional bash scritpts required for aggregating annotations and building indices required by different aligners. Update (02/10/21) The following viral sequence has also been appended to the reference: RefSeq Sequence RefSeq assembly accession Notes NC_001806.2 GCF_000859985.2 Human alphaherpesvirus 1 (Herpes simplex virus type 1) (strain 17) Location: The updated resource bundle is at /data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC.v2 on biowulf Annotations Gencode release 36 is used to annotate the human transcripts. Customized RefSeq annotations are used for annotating the viral sequences. Viruses To properly annotate viral sequences the following process was followed: Downloading annotations from NCBI: For example, to download gtf annotations for KSHV genome search \"KSHV\" at NCBI On the results page (assembly page), click on \"FTP directory for RefSeq assembly\" The FTP page has the relevant sequence and annotations files: Download the file ending with .gtf.gz : > curl -L \"https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/838/265/GCF_000838265.1_ViralProj14158/GCF_000838265.1_ViralProj14158_genomic.gtf.gz\" > GCF_000838265.1_ViralProj14158_genomic.gtf.gz > gzip -d GCF_000838265.1_ViralProj14158_genomic.gtf.gz What needs to be fixed? The GTF file downloaded from NBCI (RefSeq annotations) needs fixing in order to work seemlessly with STAR and CCBR_Pipeliner: GTF is missing lines for \"transcript\" in column 3. Transcript coordinates can be different from \"gene\" coordinates. I am going to pick all non-\"gene\" lines for a particular gene, filter them for a particular \"transcript\", ~~find the leftmost and rightmost coordinate and use them as coordinates for the new \"transcript\" line in the new GTF file~~. Using leftmost and rightmost script eliminates the UTR regions and hence if a gene has only one transcript (most common scenario), the transcript coordinates mimic the gene coordinates. eg. for HHV8GK18_gp01 gene these are the lines in the original file bash NC_009333.1 RefSeq gene 4 1083 . + . gene_id \"HHV8GK18_gp01\"; db_xref \"GeneID:4961511\"; gbkey \"Gene\"; gene \"K1\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp01\"; NC_009333.1 RefSeq exon 29 1083 . + . gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"mRNA\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; exon_number \"1\"; NC_009333.1 RefSeq CDS 105 941 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; NC_009333.1 RefSeq start_codon 105 107 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; NC_009333.1 RefSeq stop_codon 942 944 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; Some transcripts have ids as \"unknown_transcript_1\". New name will be of the format \" gene_id +_transcript_1\". All child features for the transcript in question need the transcript_id to be changed to the new name. bash NC_009333.1 RefSeq gene 3179 17026 . + . gene_id \"HHV8GK18_gp03\"; db_xref \"GeneID:4961521\"; gbkey \"Gene\"; gene \"ORF6\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp03\"; NC_009333.1 RefSeq CDS 3179 6574 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; NC_009333.1 RefSeq start_codon 3179 3181 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; NC_009333.1 RefSeq stop_codon 6575 6577 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; Some gene_id 's are empty. I am planning on reporting these in a separate file ending with .extralines . These need to be edited manually and appended to the output GTF file. I will be using \"chromosome_name:start_coordinate-end_coordinate\" as the format for generating a unique gene_id for replacement GTF entries. Eg. bash NC_009333.1 RefSeq exon 118075 118097 . - . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\"; NC_009333.1 RefSeq exon 127997 129368 . + . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"1\"; NC_009333.1 RefSeq exon 129517 130671 . + . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"2\"; will be changed to something like this: bash NC_009333.1 RefSeq gene 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\"; NC_009333.1 RefSeq transcript 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; transcript_id \"NC_009333.1:118075-118097_ transcript_1\"; transcript_name \"NC_009333.1:118075-118097_transcript_1\"; transcript_type \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\"; NC_009333.1 RefSeq exon 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; transcript_id \"NC_009333.1:118075-118097_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\"; NC_009333.1 RefSeq gene 127997 130671 . + . gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reporte d\"; NC_009333.1 RefSeq transcript 127997 130671 . + . gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; transcript_id \"NC_009333.1:127997_130671_transcr ipt_1\"; transcript_name \"NC_009333.1:127997_130671_transcript_1\"; transcript_type \"NC_009333.1:127997_130671_transcript_1\";gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; NC_009333.1 RefSeq exon 127997 129368 . + . gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"1\"; NC_009333.1 RefSeq exon 129517 130671 . + . gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"2\"; Only few genes have exon features. Most of them have CDS only. The exon line is added to have coordinates same as the CDS , if it is missing. eg. This bash NC_009333.1 RefSeq gene 15756 17026 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\"; NC_009333.1 RefSeq transcript 15756 16979 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\"; NC_009333.1 RefSeq CDS 15756 16976 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq start_codon 15756 15758 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq stop_codon 16977 16979 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; becomes bash NC_009333.1 RefSeq gene 15756 17026 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\"; NC_009333.1 RefSeq transcript 15756 16979 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\"; NC_009333.1 RefSeq exon 15756 16976 . + . gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq CDS 15756 16976 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq start_codon 15756 15758 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq stop_codon 16977 16979 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; Python script to automate: Simple python script take in RefSeq's GTF and spits out new GTF. This script ( fix_refseq_gtf.py ) is provided in the scripts folder of the repo.: # Author: Vishal N. Koparde # CCBR NCI # Date: Aug, 2020 import sys,copy,argparse parser = argparse.ArgumentParser() parser.add_argument('-i',dest='ingtf', required=True, type=str, help=\"Input RefSeq GTF ..downloaded from NCBI ftp server\") parser.add_argument('-o',dest='outgtf', required=True, type=str, help=\"Modified Output RefSeq GTF\") args = parser.parse_args() def get_gene_id(column9): x=column9.strip().split() for i,value in enumerate(x): if value==\"gene_id\": gene_id_index=i+1 break gene_id=x[gene_id_index] return gene_id def get_gene_biotype(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"gene_type\" or value==\"gene_biotype\": gene_biotype_index=i+1 found=1 break if found==0: return '\"unknown\";' gene_biotype=x[gene_biotype_index] return gene_biotype def get_gene_name(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"gene\" or value==\"gene_name\": gene_index=i+1 found=1 break if found==0: return \"\" gene_name=x[gene_index] return gene_name def get_transcript_id(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"transcript_id\": transcript_id_index=i+1 found=1 break if found==0: return '\"transcript_id_unknown\";' transcript_id=x[transcript_id_index] return transcript_id def fix_transcript_id(column9,g): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"transcript_id\": transcript_id_index=i+1 found=1 break x[transcript_id_index]=g if found==0: x.append(\"transcript_id\") x.append(g) x=\" \".join(x) return x def create_new_transript_id(g,i): n=g.split('\"') n[-2]+=\"_transcript_\"+str(i) n='\"'.join(n) return n def are_exons_present(transcript_lines): for l in transcript_lines: l_split=l.strip().split(\"\\t\") if l_split[2]==\"exon\": return True else: return False #create genelist genelist=[] gene_coords=dict() all_gtflines=list(filter(lambda x:not x.startswith(\"#\"),open(args.ingtf).readlines())) blank_gene_id_lines=[] for f in all_gtflines: its_a_gene=0 if f.strip().split(\"\\t\")[2]==\"gene\": its_a_gene=1 gene_id=get_gene_id(f.strip().split(\"\\t\")[8]) if gene_id=='\"\";': blank_gene_id_lines.append(f) continue genelist.append(gene_id) if its_a_gene==1 and not gene_id in gene_coords: gene_coords[gene_id]=(int(f.strip().split(\"\\t\")[3]),int(f.strip().split(\"\\t\")[4])) genelist=list(set(genelist)) # print(genelist) # print(len(blank_gene_id_lines)) #get genes2transcripts ... this is only for verifying that every gene has only 1 transript... this is the assumption gene_id_2_transcript_ids=dict() for g in genelist: if not g in gene_id_2_transcript_ids: gene_id_2_transcript_ids[g]=list() lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for l in non_gene_lines: t_id=get_transcript_id(l.strip().split(\"\\t\")[8]) if t_id!='\"transcript_id_unknown\";': gene_id_2_transcript_ids[g].append(t_id) gene_id_2_transcript_ids[g]=list(set(gene_id_2_transcript_ids[g])) geneid2transcriptidfile=open(args.ingtf+\".geneid2transcriptid\",'w') for k,v in gene_id_2_transcript_ids.items(): geneid2transcriptidfile.write(\"%s\\t%s\\n\"%(k,v)) geneid2transcriptidfile.close() #get genenames gene_id_2_gene_name=dict() for g in genelist: if not g in gene_id_2_gene_name: gene_id_2_gene_name[g]=list() lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) # if len(gene_line)==0: # for l in lines_with_gene_id: # print(l,) gene_line=gene_line[0] gene_name=get_gene_name(gene_line.split(\"\\t\")[8]) if gene_name==\"\": gene_name=g gene_id_2_gene_name[g]=gene_name # for k,v in gene_id_2_gene_name.items(): # print(k,v) #get transcript coordinates gene_id_2_transcript_coordinates=dict() for g in genelist: # print(\"gene=\",g) if not g in gene_id_2_transcript_coordinates: gene_id_2_transcript_coordinates[g]=list() if len(gene_id_2_transcript_ids[g])==1: gene_id_2_transcript_coordinates[g].append(gene_coords[g]) else: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for t in gene_id_2_transcript_ids[g]: # print(\"transcript=\",t) transcript_lines=list(filter(lambda x:t in x,non_gene_lines)) coords=[] for l in transcript_lines: # print(l.strip()) l_split=l.split(\"\\t\") coords.append(int(l_split[3])) coords.append(int(l_split[4])) # print() gene_id_2_transcript_coordinates[g].append((min(coords),max(coords))) # print(gene_id_2_transcript_coordinates[g]) # for k,v in gene_id_2_transcript_coordinates.items(): # print(k,v) # exit() #get gene biotype\\ gene_id_2_gene_biotype=dict() for g in genelist: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) gene_line=gene_line[0] gene_biotype=get_gene_biotype(gene_line.split(\"\\t\")[8]) gene_id_2_gene_biotype[g]=gene_biotype # for k,v in gene_id_2_gene_biotype.items(): # print(k,v) out=open(args.outgtf,'w') for g in genelist: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) gene_line=gene_line[0] gene_line=gene_line.split(\"\\t\") others=gene_line.pop(-1) gene_line_copy=copy.copy(gene_line) # other key value pairs to add in the gene_line(col9) others_to_add=[] # print(\"others=\",others) for o in others.strip().split(\"; \"): # print(\"o=\",o) o2=o.split(\" \") # print(\"o2=\",o2) key=o2[0] value=o2[1:] value=\" \".join(value) # print(\"key=\",key) # print(\"value=\",value) if key in [\"gene_id\",\"gene\",\"gene_name\",\"gene_type\",\"gene_biotype\"]: continue else: others_to_add.append(key) if not \";\" in value: others_to_add.append(value+\";\") else: others_to_add.append(value) col9=[] col9.append(\"gene_id\") col9.append(g) col9.append(\"gene_name\") col9.append(gene_id_2_gene_name[g]) col9.append(\"gene_biotype\") col9.append(gene_id_2_gene_biotype[g]) col9plus=copy.copy(col9) col9plus.extend(others_to_add) gene_col9=\" \".join(col9plus) gene_line.append(gene_col9) gene_line=\"\\t\".join(gene_line) out.write(\"%s\\n\"%(gene_line)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for i,t in enumerate(gene_id_2_transcript_ids[g]): transcript_line=copy.copy(gene_line_copy) transcript_line[2]=\"transcript\" transcript_line[3]=str(gene_id_2_transcript_coordinates[g][i][0]) transcript_line[4]=str(gene_id_2_transcript_coordinates[g][i][1]) new_trascript_id=create_new_transript_id(g,i+1) transcript_col9=copy.copy(col9) transcript_col9.append(\"transcript_id\") transcript_col9.append(new_trascript_id) transcript_col9.append(\"transcript_name\") transcript_col9.append(new_trascript_id) transcript_col9.append(\"transcript_type\") transcript_col9.append(gene_id_2_gene_biotype[g]) transcript_col9=\" \".join(transcript_col9) transcript_line.append(transcript_col9) transcript_line=\"\\t\".join(transcript_line) out.write(\"%s\\n\"%(transcript_line)) transcript_lines=list(filter(lambda x:t in x,non_gene_lines)) have_exons=are_exons_present(transcript_lines) for l in transcript_lines: # print(l) l=l.strip().split(\"\\t\") tofix=l.pop(-1) l.append(fix_transcript_id(tofix,new_trascript_id)) if l[2]==\"CDS\" and have_exons==False: l2=copy.copy(l) l2[7]=\".\" l2[2]=\"exon\" l2=\"\\t\".join(l2) out.write(\"%s\\n\"%(l2)) l=\"\\t\".join(l) out.write(\"%s\\n\"%(l)) # print(l) out.close() out=open(args.ingtf+\".extralines\",'w') for b in blank_gene_id_lines: out.write(b) out.close() Final versions of the GTF as located here: /data/Ziegelbauer_lab/circRNADetection/viral_db/GTF/final_versions","title":"References"},{"location":"references/#circrna-daq-pipeline","text":"The reference sequences comprises of the host genome and the viral genomes.","title":"circRNA DAQ  Pipeline"},{"location":"references/#fasta","text":"hg38 genome build is chosen to represent human (host). Human ribosomal sequences ( 45S, 5S ) are downloaded from NCBI. hg38 was masked for rRNA sequence and 45S and 5S sequences from NCBI are appended as separate chromosomes. The following viral sequences were appended to the rRNA masked hg38 reference: RefSeq Sequence RefSeq assembly accession Notes NC_007605.1 GCF_002402265.1 Human gammaherpesvirus 4 (Epstein-Barr virus) NC_000898.1 GCF_000846365.1 Human betaherpesvirus 6B NC_001664.4 GCF_000845685.2 Human betaherpesvirus 6A NC_001716.2 GCF_000848125.1 Human betaherpesvirus 7 NC_006273.2 GCF_000845245.1 Human betaherpesvirus 5 NC_009333.1 GCF_000838265.1 Human gammaherpesvirus 8 NC_045512.2 GCF_009858895.2 Severe acute respiratory syndrome-related coronavirus MN485971.1 xx HIV from Belgium ... GTF is hand curated Location: The entire resource bundle is available at /data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC on biowulf. This location also have additional bash scritpts required for aggregating annotations and building indices required by different aligners. Update (02/10/21) The following viral sequence has also been appended to the reference: RefSeq Sequence RefSeq assembly accession Notes NC_001806.2 GCF_000859985.2 Human alphaherpesvirus 1 (Herpes simplex virus type 1) (strain 17) Location: The updated resource bundle is at /data/Ziegelbauer_lab/resources/hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC.v2 on biowulf","title":"Fasta"},{"location":"references/#annotations","text":"Gencode release 36 is used to annotate the human transcripts. Customized RefSeq annotations are used for annotating the viral sequences.","title":"Annotations"},{"location":"references/#viruses","text":"To properly annotate viral sequences the following process was followed: Downloading annotations from NCBI: For example, to download gtf annotations for KSHV genome search \"KSHV\" at NCBI On the results page (assembly page), click on \"FTP directory for RefSeq assembly\" The FTP page has the relevant sequence and annotations files: Download the file ending with .gtf.gz : > curl -L \"https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/838/265/GCF_000838265.1_ViralProj14158/GCF_000838265.1_ViralProj14158_genomic.gtf.gz\" > GCF_000838265.1_ViralProj14158_genomic.gtf.gz > gzip -d GCF_000838265.1_ViralProj14158_genomic.gtf.gz What needs to be fixed? The GTF file downloaded from NBCI (RefSeq annotations) needs fixing in order to work seemlessly with STAR and CCBR_Pipeliner: GTF is missing lines for \"transcript\" in column 3. Transcript coordinates can be different from \"gene\" coordinates. I am going to pick all non-\"gene\" lines for a particular gene, filter them for a particular \"transcript\", ~~find the leftmost and rightmost coordinate and use them as coordinates for the new \"transcript\" line in the new GTF file~~. Using leftmost and rightmost script eliminates the UTR regions and hence if a gene has only one transcript (most common scenario), the transcript coordinates mimic the gene coordinates. eg. for HHV8GK18_gp01 gene these are the lines in the original file bash NC_009333.1 RefSeq gene 4 1083 . + . gene_id \"HHV8GK18_gp01\"; db_xref \"GeneID:4961511\"; gbkey \"Gene\"; gene \"K1\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp01\"; NC_009333.1 RefSeq exon 29 1083 . + . gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"mRNA\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; exon_number \"1\"; NC_009333.1 RefSeq CDS 105 941 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; NC_009333.1 RefSeq start_codon 105 107 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; NC_009333.1 RefSeq stop_codon 942 944 . + 0 gene_id \"HHV8GK18_gp01\"; transcript_id \"HHV8GK18_gp01\"; gbkey \"CDS\"; gene \"K1\"; locus_tag \"HHV8GK18_gp01\"; note \"contains an Ig domain\"; product \"K1\"; protein_id \"YP_001129350.1\"; exon_number \"1\"; Some transcripts have ids as \"unknown_transcript_1\". New name will be of the format \" gene_id +_transcript_1\". All child features for the transcript in question need the transcript_id to be changed to the new name. bash NC_009333.1 RefSeq gene 3179 17026 . + . gene_id \"HHV8GK18_gp03\"; db_xref \"GeneID:4961521\"; gbkey \"Gene\"; gene \"ORF6\"; gene_biotype \"protein_coding\"; locus_tag \"HHV8GK18_gp03\"; NC_009333.1 RefSeq CDS 3179 6574 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; NC_009333.1 RefSeq start_codon 3179 3181 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; NC_009333.1 RefSeq stop_codon 6575 6577 . + 0 gene_id \"HHV8GK18_gp03\"; transcript_id \"unknown_transcript_1\"; gbkey \"CDS\"; gene \"ORF6\"; locus_tag \"HHV8GK18_gp03\"; note \"herpesvirus core gene UL29 family\"; product \"ORF6\"; protein_id \"YP_001129352.1\"; Some gene_id 's are empty. I am planning on reporting these in a separate file ending with .extralines . These need to be edited manually and appended to the output GTF file. I will be using \"chromosome_name:start_coordinate-end_coordinate\" as the format for generating a unique gene_id for replacement GTF entries. Eg. bash NC_009333.1 RefSeq exon 118075 118097 . - . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\"; NC_009333.1 RefSeq exon 127997 129368 . + . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"1\"; NC_009333.1 RefSeq exon 129517 130671 . + . gene_id \"\"; transcript_id \"unknown_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"2\"; will be changed to something like this: bash NC_009333.1 RefSeq gene 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\"; NC_009333.1 RefSeq transcript 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; gene_name \"NC_009333.1:118075-118097\"; gene_biotype \"miRNA\"; transcript_id \"NC_009333.1:118075-118097_ transcript_1\"; transcript_name \"NC_009333.1:118075-118097_transcript_1\"; transcript_type \"miRNA\"; gbkey \"misc_RNA\"; product \"miR-K10\"; NC_009333.1 RefSeq exon 118075 118097 . - . gene_id \"NC_009333.1:118075-118097\"; transcript_id \"NC_009333.1:118075-118097_transcript_1\"; gbkey \"misc_RNA\"; product \"miR-K10\"; exon_number \"1\"; NC_009333.1 RefSeq gene 127997 130671 . + . gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reporte d\"; NC_009333.1 RefSeq transcript 127997 130671 . + . gene_id \"NC_009333.1:127997_130671\"; gene_name \"NC_009333.1:127997_130671\"; gene_biotype \"mRNA\"; transcript_id \"NC_009333.1:127997_130671_transcr ipt_1\"; transcript_name \"NC_009333.1:127997_130671_transcript_1\"; transcript_type \"NC_009333.1:127997_130671_transcript_1\";gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; NC_009333.1 RefSeq exon 127997 129368 . + . gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"1\"; NC_009333.1 RefSeq exon 129517 130671 . + . gene_id \"NC_009333.1:127997_130671\"; transcript_id \"NC_009333.1:127997_130671_transcript_1\"; gbkey \"mRNA\"; note \"K14, ORF74; polyA_site not reported\"; exon_number \"2\"; Only few genes have exon features. Most of them have CDS only. The exon line is added to have coordinates same as the CDS , if it is missing. eg. This bash NC_009333.1 RefSeq gene 15756 17026 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\"; NC_009333.1 RefSeq transcript 15756 16979 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\"; NC_009333.1 RefSeq CDS 15756 16976 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq start_codon 15756 15758 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq stop_codon 16977 16979 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; becomes bash NC_009333.1 RefSeq gene 15756 17026 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; db_xref \"GeneID:4961439\"; gbkey \"Gene\"; locus_tag \"HHV8GK18_gp08\"; NC_009333.1 RefSeq transcript 15756 16979 . + . gene_id \"HHV8GK18_gp08\"; gene_name \"ORF11\"; gene_biotype \"protein_coding\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; transcript_name \"HHV8GK18_gp08_transcript_1\"; transcript_type \"protein_coding\"; NC_009333.1 RefSeq exon 15756 16976 . + . gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq CDS 15756 16976 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq start_codon 15756 15758 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; NC_009333.1 RefSeq stop_codon 16977 16979 . + 0 gene_id \"HHV8GK18_gp08\"; transcript_id \"HHV8GK18_gp08_transcript_1\"; gbkey \"CDS\"; gene \"ORF11\"; locus_tag \"HHV8GK18_gp08\"; note \"derived from herpesvirus dUTPase; related to HHV-5 UL82, UL83 and UL84\"; product \"ORF11\"; protein_id \"YP_001129357.1\"; Python script to automate: Simple python script take in RefSeq's GTF and spits out new GTF. This script ( fix_refseq_gtf.py ) is provided in the scripts folder of the repo.: # Author: Vishal N. Koparde # CCBR NCI # Date: Aug, 2020 import sys,copy,argparse parser = argparse.ArgumentParser() parser.add_argument('-i',dest='ingtf', required=True, type=str, help=\"Input RefSeq GTF ..downloaded from NCBI ftp server\") parser.add_argument('-o',dest='outgtf', required=True, type=str, help=\"Modified Output RefSeq GTF\") args = parser.parse_args() def get_gene_id(column9): x=column9.strip().split() for i,value in enumerate(x): if value==\"gene_id\": gene_id_index=i+1 break gene_id=x[gene_id_index] return gene_id def get_gene_biotype(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"gene_type\" or value==\"gene_biotype\": gene_biotype_index=i+1 found=1 break if found==0: return '\"unknown\";' gene_biotype=x[gene_biotype_index] return gene_biotype def get_gene_name(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"gene\" or value==\"gene_name\": gene_index=i+1 found=1 break if found==0: return \"\" gene_name=x[gene_index] return gene_name def get_transcript_id(column9): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"transcript_id\": transcript_id_index=i+1 found=1 break if found==0: return '\"transcript_id_unknown\";' transcript_id=x[transcript_id_index] return transcript_id def fix_transcript_id(column9,g): x=column9.strip().split() found=0 for i,value in enumerate(x): if value==\"transcript_id\": transcript_id_index=i+1 found=1 break x[transcript_id_index]=g if found==0: x.append(\"transcript_id\") x.append(g) x=\" \".join(x) return x def create_new_transript_id(g,i): n=g.split('\"') n[-2]+=\"_transcript_\"+str(i) n='\"'.join(n) return n def are_exons_present(transcript_lines): for l in transcript_lines: l_split=l.strip().split(\"\\t\") if l_split[2]==\"exon\": return True else: return False #create genelist genelist=[] gene_coords=dict() all_gtflines=list(filter(lambda x:not x.startswith(\"#\"),open(args.ingtf).readlines())) blank_gene_id_lines=[] for f in all_gtflines: its_a_gene=0 if f.strip().split(\"\\t\")[2]==\"gene\": its_a_gene=1 gene_id=get_gene_id(f.strip().split(\"\\t\")[8]) if gene_id=='\"\";': blank_gene_id_lines.append(f) continue genelist.append(gene_id) if its_a_gene==1 and not gene_id in gene_coords: gene_coords[gene_id]=(int(f.strip().split(\"\\t\")[3]),int(f.strip().split(\"\\t\")[4])) genelist=list(set(genelist)) # print(genelist) # print(len(blank_gene_id_lines)) #get genes2transcripts ... this is only for verifying that every gene has only 1 transript... this is the assumption gene_id_2_transcript_ids=dict() for g in genelist: if not g in gene_id_2_transcript_ids: gene_id_2_transcript_ids[g]=list() lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for l in non_gene_lines: t_id=get_transcript_id(l.strip().split(\"\\t\")[8]) if t_id!='\"transcript_id_unknown\";': gene_id_2_transcript_ids[g].append(t_id) gene_id_2_transcript_ids[g]=list(set(gene_id_2_transcript_ids[g])) geneid2transcriptidfile=open(args.ingtf+\".geneid2transcriptid\",'w') for k,v in gene_id_2_transcript_ids.items(): geneid2transcriptidfile.write(\"%s\\t%s\\n\"%(k,v)) geneid2transcriptidfile.close() #get genenames gene_id_2_gene_name=dict() for g in genelist: if not g in gene_id_2_gene_name: gene_id_2_gene_name[g]=list() lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) # if len(gene_line)==0: # for l in lines_with_gene_id: # print(l,) gene_line=gene_line[0] gene_name=get_gene_name(gene_line.split(\"\\t\")[8]) if gene_name==\"\": gene_name=g gene_id_2_gene_name[g]=gene_name # for k,v in gene_id_2_gene_name.items(): # print(k,v) #get transcript coordinates gene_id_2_transcript_coordinates=dict() for g in genelist: # print(\"gene=\",g) if not g in gene_id_2_transcript_coordinates: gene_id_2_transcript_coordinates[g]=list() if len(gene_id_2_transcript_ids[g])==1: gene_id_2_transcript_coordinates[g].append(gene_coords[g]) else: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for t in gene_id_2_transcript_ids[g]: # print(\"transcript=\",t) transcript_lines=list(filter(lambda x:t in x,non_gene_lines)) coords=[] for l in transcript_lines: # print(l.strip()) l_split=l.split(\"\\t\") coords.append(int(l_split[3])) coords.append(int(l_split[4])) # print() gene_id_2_transcript_coordinates[g].append((min(coords),max(coords))) # print(gene_id_2_transcript_coordinates[g]) # for k,v in gene_id_2_transcript_coordinates.items(): # print(k,v) # exit() #get gene biotype\\ gene_id_2_gene_biotype=dict() for g in genelist: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) gene_line=gene_line[0] gene_biotype=get_gene_biotype(gene_line.split(\"\\t\")[8]) gene_id_2_gene_biotype[g]=gene_biotype # for k,v in gene_id_2_gene_biotype.items(): # print(k,v) out=open(args.outgtf,'w') for g in genelist: lines_with_gene_id=list(filter(lambda x: g in x,all_gtflines)) gene_line=list(filter(lambda x:x.split(\"\\t\")[2]==\"gene\",lines_with_gene_id)) gene_line=gene_line[0] gene_line=gene_line.split(\"\\t\") others=gene_line.pop(-1) gene_line_copy=copy.copy(gene_line) # other key value pairs to add in the gene_line(col9) others_to_add=[] # print(\"others=\",others) for o in others.strip().split(\"; \"): # print(\"o=\",o) o2=o.split(\" \") # print(\"o2=\",o2) key=o2[0] value=o2[1:] value=\" \".join(value) # print(\"key=\",key) # print(\"value=\",value) if key in [\"gene_id\",\"gene\",\"gene_name\",\"gene_type\",\"gene_biotype\"]: continue else: others_to_add.append(key) if not \";\" in value: others_to_add.append(value+\";\") else: others_to_add.append(value) col9=[] col9.append(\"gene_id\") col9.append(g) col9.append(\"gene_name\") col9.append(gene_id_2_gene_name[g]) col9.append(\"gene_biotype\") col9.append(gene_id_2_gene_biotype[g]) col9plus=copy.copy(col9) col9plus.extend(others_to_add) gene_col9=\" \".join(col9plus) gene_line.append(gene_col9) gene_line=\"\\t\".join(gene_line) out.write(\"%s\\n\"%(gene_line)) non_gene_lines=list(filter(lambda x:x.split(\"\\t\")[2]!=\"gene\",lines_with_gene_id)) for i,t in enumerate(gene_id_2_transcript_ids[g]): transcript_line=copy.copy(gene_line_copy) transcript_line[2]=\"transcript\" transcript_line[3]=str(gene_id_2_transcript_coordinates[g][i][0]) transcript_line[4]=str(gene_id_2_transcript_coordinates[g][i][1]) new_trascript_id=create_new_transript_id(g,i+1) transcript_col9=copy.copy(col9) transcript_col9.append(\"transcript_id\") transcript_col9.append(new_trascript_id) transcript_col9.append(\"transcript_name\") transcript_col9.append(new_trascript_id) transcript_col9.append(\"transcript_type\") transcript_col9.append(gene_id_2_gene_biotype[g]) transcript_col9=\" \".join(transcript_col9) transcript_line.append(transcript_col9) transcript_line=\"\\t\".join(transcript_line) out.write(\"%s\\n\"%(transcript_line)) transcript_lines=list(filter(lambda x:t in x,non_gene_lines)) have_exons=are_exons_present(transcript_lines) for l in transcript_lines: # print(l) l=l.strip().split(\"\\t\") tofix=l.pop(-1) l.append(fix_transcript_id(tofix,new_trascript_id)) if l[2]==\"CDS\" and have_exons==False: l2=copy.copy(l) l2[7]=\".\" l2[2]=\"exon\" l2=\"\\t\".join(l2) out.write(\"%s\\n\"%(l2)) l=\"\\t\".join(l) out.write(\"%s\\n\"%(l)) # print(l) out.close() out=open(args.ingtf+\".extralines\",'w') for b in blank_gene_id_lines: out.write(b) out.close() Final versions of the GTF as located here: /data/Ziegelbauer_lab/circRNADetection/viral_db/GTF/final_versions","title":"Viruses"},{"location":"tutorial/","text":"circRNA DAQ Pipeline Tutorial Prerequisites Biowulf account: Biowulf account can be requested here Membership to Ziegelbauer user group on Biowulf. You can check this by typing the following command: bash % groups output: bash CCBR kopardevn Ziegelbauer_lab If Ziegelbauer_lab is not listed then you can email a request to be added to the groups here Location Different versions of circRNA DAQ pipeline have been parked at /data/Ziegelbauer_lab/Pipelines/circRNA % ls -la /data/Ziegelbauer_lab/Pipelines/circRNA output: total 135 drwxrws--T. 6 kopardevn Ziegelbauer_lab 4096 Feb 4 18:27 . drwxrws--T. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:05 .. lrwxrwxrwx. 1 kopardevn Ziegelbauer_lab 54 Feb 3 14:29 dev -> /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA drwxrws---. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:07 v0.1.0 drwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 12 17:32 v0.2.1 drwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 14 10:24 v0.3.3 drwxrws---. 7 kopardevn Ziegelbauer_lab 4096 Feb 4 18:26 v0.4.0 The exacts versions listed here may changed as newer versions are added. Init To get help about the pipeline you can run: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh --help output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b v0.4.0-14-gb2f387c run_circrna_daq.sh: run the workflow to DAQ (detect, annotate and quantify circRNAs) USAGE: bash run_circrna_daq.sh <MODE> Required Positional Argument: MODE: [Type: Str] Valid options: a) init <path_to_workdir> : initialize workdir b) run <path_to_workdir>: run with slurm c) reset <path_to_workdir> : DELETE workdir dir and re-init it e) dryrun <path_to_workdir> : dry run snakemake to generate DAG f) unlock <path_to_workdir> : unlock workdir if locked by snakemake g) runlocal <path_to_workdir>: run without submitting to sbatch You can replace v0.4.0 in the above command with the latest version to use a newer version. run_circrna_daq.sh was called test.sh in versions older than v0.4.0 . To initial the working directory run: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test This assumes that /scratch/circRNA_daq_test does not exist before running this command and is at a location where write permissions are available. % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test \u200b output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b v0.4.0-14-gb2f387c Working Dir: /scratch/circRNA_daq_test /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA /scratch/circRNA_daq_test Logs Dir: /scratch/circRNA_daq_test/logs Stats Dir: /scratch/circRNA_daq_test/stats Done Initializing /scratch/circRNA_daq_test. You can now edit /scratch/circRNA_daq_test/config.yaml and /scratch/circRNA_daq_test/samples.tsv The above command creates /scratch/circRNA_daq_test folder and creates 2 subfolders logs and stats inside that folder along with config.yaml and samples.tsv files. % tree /scratch/circRNA_daq_test \u200b output: /scratch/circRNA_daq_test \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 logs \u251c\u2500\u2500 samples.tsv \u2514\u2500\u2500 stats 2 directories, 2 files config.yaml This file is used to fine tune the execution of the pipeline by setting: sample sheet location ... aka samples.tsv whether to run CLEAR pipeline or not by setting run_clear to True or False describes the location of other resources/indexes/tools etc. Generally, these do NOT need to be changed. samples.tsv Tab delimited definition of sample sheet. The header is fixed and each row represents a sample. It has 3 columns: sampleName = Name of the sample. This has to be unique. path_to_R1_fastq = absolute path to the read1 fastq.gz file. path_to_R2_fastq = absolute path to the read2 fastq.gz file. If the sample was sequenced in single-end mode, then leave this blank. Running init will put the following example file in the workdir supplied and it looks like this: % more /scratch/circRNA_daq_test/samples.tsv output: sampleName path_to_R1_fastq path_to_R2_fastq GI1_N /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz GI1_T /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz Dryrun Once the samples.tsv file has been edited appropriately to include the desired samples, it is a good idea to dryrun the pipeline to ensure that everything will work as desired. Dryrun can be run as follows: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh dryrun /scratch/circRNA_daq_test Here is the output of the above command. Run Upon verifying that dryrun is successful. You can then submit the job to the cluster using the following command: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh run /scratch/circRNA_daq_test output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: 37419bc0eb196fb1e137849ebeb2739a1c12126c v0.4.0-16-g37419bc Working Dir: /scratch/circRNA_daq_test [+] Loading python 3.7 ... [+] Loading snakemake 5.24.1 Running... ls: cannot access /scratch/circRNA_daq_test/slurm-*.out: No such file or directory 7930909 7930909 is the jobid returned by the slurm job scheduler on biowulf. This means that the job was successfully submitted, it will spawn off other subjobs which in-turn will be run and outputs will be moved to the results folder created inside the working directory supplied at command line. You can check the status of your queue of jobs in biowulf running: % squeue -u `whoami` output: JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 7930909 ccr,norm circRNA kopardev PD 0:00 1 (None) ST in the above results stands for Status and PD means Pending. The status will change from pending( PD ) to running( R ) to completed as jobs are run on the cluster. Next, just sit tight until the pipeline finishes. You can keep monitoring the queue as shown above. If there are no jobs running on biowulf, then your pipeline has finished (or errored out!) Once completed the output should something like this: % tree /scratch/circRNA_daq_test output: /scratch/circRNA_daq_test \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 fastqs \u2502 \u251c\u2500\u2500 GI1_N.R1.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz \u2502 \u251c\u2500\u2500 GI1_N.R2.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz \u2502 \u2514\u2500\u2500 GI1_T.R1.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..err \u2502 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..out \u2502 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..err \u2502 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..out \u2502 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..err \u2502 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..out \u2502 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.out \u2502 \u2514\u2500\u2500 slurm-7658773.out.gz \u251c\u2500\u2500 qc \u2502 \u2514\u2500\u2500 fastqc \u2502 \u251c\u2500\u2500 GI1_N.R1_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R1_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R2_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R2_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_T.R1_fastqc.html \u2502 \u251c\u2500\u2500 GI1_T.R1_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_T.R1.trim_fastqc.html \u2502 \u2514\u2500\u2500 GI1_T.R1.trim_fastqc.zip \u251c\u2500\u2500 report.html \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix.txt \u2502 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 circExplorer_count_matrix.txt \u2502 \u251c\u2500\u2500 circExplorer_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 ciri_count_matrix.txt \u2502 \u251c\u2500\u2500 ciri_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 GI1_N \u2502 \u2502 \u251c\u2500\u2500 circExplorer \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.back_spliced_junction.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_circexplorer_parse.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.circularRNA_known.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 low_conf_GI1_N.circularRNA_known.txt \u2502 \u2502 \u251c\u2500\u2500 ciri \u2502 \u2502 \u2502 \u251c\u2500\u2500 CIRIerror.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.bwa.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.bwa.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.ciri.log \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N.ciri.out \u2502 \u2502 \u251c\u2500\u2500 CLEAR \u2502 \u2502 \u2502 \u251c\u2500\u2500 circ \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 bsj.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 fusion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 junctions.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 hisat \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 sp.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant.txt \u2502 \u2502 \u251c\u2500\u2500 STAR1p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N_p1.SJ.out.tab \u2502 \u2502 \u251c\u2500\u2500 STAR2p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.readids \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N_p2.SJ.out.tab \u2502 \u2502 \u2514\u2500\u2500 trim \u2502 \u2502 \u251c\u2500\u2500 GI1_N.R1.trim.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 GI1_N.R2.trim.fastq.gz \u2502 \u251c\u2500\u2500 GI1_T \u2502 \u2502 \u251c\u2500\u2500 circExplorer \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.back_spliced_junction.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_circexplorer_parse.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.circularRNA_known.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 low_conf_GI1_T.circularRNA_known.txt \u2502 \u2502 \u251c\u2500\u2500 ciri \u2502 \u2502 \u2502 \u251c\u2500\u2500 CIRIerror.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.bwa.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.bwa.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.ciri.log \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T.ciri.out \u2502 \u2502 \u251c\u2500\u2500 CLEAR \u2502 \u2502 \u2502 \u251c\u2500\u2500 circ \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 bsj.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 fusion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 junctions.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 hisat \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 sp.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant.txt \u2502 \u2502 \u251c\u2500\u2500 STAR1p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T_p1.SJ.out.tab \u2502 \u2502 \u251c\u2500\u2500 STAR2p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.readids \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T_p2.SJ.out.tab \u2502 \u2502 \u2514\u2500\u2500 trim \u2502 \u2502 \u251c\u2500\u2500 GI1_T.R1.trim.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 GI1_T.R2.trim.fastq.gz \u2502 \u2514\u2500\u2500 pass1.out.tab \u251c\u2500\u2500 samples.tsv \u251c\u2500\u2500 stats \u2502 \u251c\u2500\u2500 snakemake.log.20210204103112.gz \u2502 \u2514\u2500\u2500 snakemake.stats.20210204103112.gz \u251c\u2500\u2500 submit_script.sbatch Runlocal If you have grabbed an interactive node using sinteractive and have a small test dataset in the samples.tsv and simply want to quickly check if everything works as expected. You can run locally , i.e. directly on the interactive node without submitting to the cluster using: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh runlocal /scratch/circRNA_daq_test This is only for testing purposes, do not use it for running 10s of samples as you will be soon timed out of the interactive node.","title":"Tutorial"},{"location":"tutorial/#circrna-daq-pipeline","text":"","title":"circRNA DAQ Pipeline"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#prerequisites","text":"Biowulf account: Biowulf account can be requested here Membership to Ziegelbauer user group on Biowulf. You can check this by typing the following command: bash % groups output: bash CCBR kopardevn Ziegelbauer_lab If Ziegelbauer_lab is not listed then you can email a request to be added to the groups here","title":"Prerequisites"},{"location":"tutorial/#location","text":"Different versions of circRNA DAQ pipeline have been parked at /data/Ziegelbauer_lab/Pipelines/circRNA % ls -la /data/Ziegelbauer_lab/Pipelines/circRNA output: total 135 drwxrws--T. 6 kopardevn Ziegelbauer_lab 4096 Feb 4 18:27 . drwxrws--T. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:05 .. lrwxrwxrwx. 1 kopardevn Ziegelbauer_lab 54 Feb 3 14:29 dev -> /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA drwxrws---. 3 kopardevn Ziegelbauer_lab 4096 Jan 12 09:07 v0.1.0 drwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 12 17:32 v0.2.1 drwxrws---. 6 kopardevn Ziegelbauer_lab 4096 Jan 14 10:24 v0.3.3 drwxrws---. 7 kopardevn Ziegelbauer_lab 4096 Feb 4 18:26 v0.4.0 The exacts versions listed here may changed as newer versions are added.","title":"Location"},{"location":"tutorial/#init","text":"To get help about the pipeline you can run: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh --help output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b v0.4.0-14-gb2f387c run_circrna_daq.sh: run the workflow to DAQ (detect, annotate and quantify circRNAs) USAGE: bash run_circrna_daq.sh <MODE> Required Positional Argument: MODE: [Type: Str] Valid options: a) init <path_to_workdir> : initialize workdir b) run <path_to_workdir>: run with slurm c) reset <path_to_workdir> : DELETE workdir dir and re-init it e) dryrun <path_to_workdir> : dry run snakemake to generate DAG f) unlock <path_to_workdir> : unlock workdir if locked by snakemake g) runlocal <path_to_workdir>: run without submitting to sbatch You can replace v0.4.0 in the above command with the latest version to use a newer version. run_circrna_daq.sh was called test.sh in versions older than v0.4.0 . To initial the working directory run: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test This assumes that /scratch/circRNA_daq_test does not exist before running this command and is at a location where write permissions are available. % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh init /scratch/circRNA_daq_test \u200b output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: b2f387c1b6854646d12974cd16da1168d93bb43b v0.4.0-14-gb2f387c Working Dir: /scratch/circRNA_daq_test /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA /scratch/circRNA_daq_test Logs Dir: /scratch/circRNA_daq_test/logs Stats Dir: /scratch/circRNA_daq_test/stats Done Initializing /scratch/circRNA_daq_test. You can now edit /scratch/circRNA_daq_test/config.yaml and /scratch/circRNA_daq_test/samples.tsv The above command creates /scratch/circRNA_daq_test folder and creates 2 subfolders logs and stats inside that folder along with config.yaml and samples.tsv files. % tree /scratch/circRNA_daq_test \u200b output: /scratch/circRNA_daq_test \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 logs \u251c\u2500\u2500 samples.tsv \u2514\u2500\u2500 stats 2 directories, 2 files","title":"Init"},{"location":"tutorial/#configyaml","text":"This file is used to fine tune the execution of the pipeline by setting: sample sheet location ... aka samples.tsv whether to run CLEAR pipeline or not by setting run_clear to True or False describes the location of other resources/indexes/tools etc. Generally, these do NOT need to be changed.","title":"config.yaml"},{"location":"tutorial/#samplestsv","text":"Tab delimited definition of sample sheet. The header is fixed and each row represents a sample. It has 3 columns: sampleName = Name of the sample. This has to be unique. path_to_R1_fastq = absolute path to the read1 fastq.gz file. path_to_R2_fastq = absolute path to the read2 fastq.gz file. If the sample was sequenced in single-end mode, then leave this blank. Running init will put the following example file in the workdir supplied and it looks like this: % more /scratch/circRNA_daq_test/samples.tsv output: sampleName path_to_R1_fastq path_to_R2_fastq GI1_N /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz GI1_T /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz","title":"samples.tsv"},{"location":"tutorial/#dryrun","text":"Once the samples.tsv file has been edited appropriately to include the desired samples, it is a good idea to dryrun the pipeline to ensure that everything will work as desired. Dryrun can be run as follows: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh dryrun /scratch/circRNA_daq_test Here is the output of the above command.","title":"Dryrun"},{"location":"tutorial/#run","text":"Upon verifying that dryrun is successful. You can then submit the job to the cluster using the following command: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh run /scratch/circRNA_daq_test output: Pipeline Dir: /data/Ziegelbauer_lab/circRNADetection/scripts/circRNA Git Commit/Tag: 37419bc0eb196fb1e137849ebeb2739a1c12126c v0.4.0-16-g37419bc Working Dir: /scratch/circRNA_daq_test [+] Loading python 3.7 ... [+] Loading snakemake 5.24.1 Running... ls: cannot access /scratch/circRNA_daq_test/slurm-*.out: No such file or directory 7930909 7930909 is the jobid returned by the slurm job scheduler on biowulf. This means that the job was successfully submitted, it will spawn off other subjobs which in-turn will be run and outputs will be moved to the results folder created inside the working directory supplied at command line. You can check the status of your queue of jobs in biowulf running: % squeue -u `whoami` output: JOBID PARTITION NAME USER ST TIME NODES NODELIST(REASON) 7930909 ccr,norm circRNA kopardev PD 0:00 1 (None) ST in the above results stands for Status and PD means Pending. The status will change from pending( PD ) to running( R ) to completed as jobs are run on the cluster. Next, just sit tight until the pipeline finishes. You can keep monitoring the queue as shown above. If there are no jobs running on biowulf, then your pipeline has finished (or errored out!) Once completed the output should something like this: % tree /scratch/circRNA_daq_test output: /scratch/circRNA_daq_test \u251c\u2500\u2500 config.yaml \u251c\u2500\u2500 fastqs \u2502 \u251c\u2500\u2500 GI1_N.R1.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R1_001.fastq.gz \u2502 \u251c\u2500\u2500 GI1_N.R2.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/5_GI112118_norm_S4_R2_001.fastq.gz \u2502 \u2514\u2500\u2500 GI1_T.R1.fastq.gz -> /data/Ziegelbauer_lab/circRNADetection/rawdata/ccbr983/fastq2/6_GI112118_tum_S5_R1_001.fastq.gz \u251c\u2500\u2500 logs \u2502 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7658778.cutadapt.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7658779.cutadapt.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659728.fastqc.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659729.star1p.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659730.ciri.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7659731.clear.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660529.ciri.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660738.clear.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660753.fastqc.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7660754.star1p.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..err \u2502 \u251c\u2500\u2500 7658773.7661100.merge_SJ_tabs..out \u2502 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7661134.star2p.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7661135.star2p.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662317.create_BSJ_bam.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662319.annotate_circRNA.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7662563.annotate_circRNA.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7662564.create_BSJ_bam.sample=GI1_N.out \u2502 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.err \u2502 \u251c\u2500\u2500 7658773.7662567.split_BAM_create_BW.sample=GI1_T.out \u2502 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..err \u2502 \u251c\u2500\u2500 7658773.7663000.create_circexplorer_count_matrix..out \u2502 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..err \u2502 \u251c\u2500\u2500 7658773.7663642.create_ciri_count_matrix..out \u2502 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.err \u2502 \u251c\u2500\u2500 7658773.7663643.split_BAM_create_BW.sample=GI1_N.out \u2502 \u2514\u2500\u2500 slurm-7658773.out.gz \u251c\u2500\u2500 qc \u2502 \u2514\u2500\u2500 fastqc \u2502 \u251c\u2500\u2500 GI1_N.R1_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R1_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R1.trim_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R2_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R2_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.html \u2502 \u251c\u2500\u2500 GI1_N.R2.trim_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_T.R1_fastqc.html \u2502 \u251c\u2500\u2500 GI1_T.R1_fastqc.zip \u2502 \u251c\u2500\u2500 GI1_T.R1.trim_fastqc.html \u2502 \u2514\u2500\u2500 GI1_T.R1.trim_fastqc.zip \u251c\u2500\u2500 report.html \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix.txt \u2502 \u251c\u2500\u2500 circExplorer_BSJ_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 circExplorer_count_matrix.txt \u2502 \u251c\u2500\u2500 circExplorer_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 ciri_count_matrix.txt \u2502 \u251c\u2500\u2500 ciri_count_matrix_with_annotations.txt \u2502 \u251c\u2500\u2500 GI1_N \u2502 \u2502 \u251c\u2500\u2500 circExplorer \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.back_spliced_junction.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_circexplorer_parse.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.circularRNA_known.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 low_conf_GI1_N.circularRNA_known.txt \u2502 \u2502 \u251c\u2500\u2500 ciri \u2502 \u2502 \u2502 \u251c\u2500\u2500 CIRIerror.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.bwa.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.bwa.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.ciri.log \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N.ciri.out \u2502 \u2502 \u251c\u2500\u2500 CLEAR \u2502 \u2502 \u2502 \u251c\u2500\u2500 circ \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 bsj.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 fusion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 junctions.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 hisat \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 sp.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant.txt \u2502 \u2502 \u251c\u2500\u2500 STAR1p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p1.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N_p1.SJ.out.tab \u2502 \u2502 \u251c\u2500\u2500 STAR2p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.ERCC.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.hg38.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.MN485971.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_000898.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001664.4.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_001716.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_006273.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_007605.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_009333.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.NC_045512.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.readids \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N.BSJ.rRNA.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Aligned.sortedByCoord.out.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_N_p2.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_N_p2.SJ.out.tab \u2502 \u2502 \u2514\u2500\u2500 trim \u2502 \u2502 \u251c\u2500\u2500 GI1_N.R1.trim.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 GI1_N.R2.trim.fastq.gz \u2502 \u251c\u2500\u2500 GI1_T \u2502 \u2502 \u251c\u2500\u2500 circExplorer \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.back_spliced_junction.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_circexplorer_parse.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.circularRNA_known.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 low_conf_GI1_T.circularRNA_known.txt \u2502 \u2502 \u251c\u2500\u2500 ciri \u2502 \u2502 \u2502 \u251c\u2500\u2500 CIRIerror.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.bwa.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.bwa.log \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.ciri.log \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T.ciri.out \u2502 \u2502 \u251c\u2500\u2500 CLEAR \u2502 \u2502 \u2502 \u251c\u2500\u2500 circ \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 bsj.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 fusion \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 junctions.bed \u2502 \u2502 \u2502 \u251c\u2500\u2500 hisat \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 sp.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant \u2502 \u2502 \u2502 \u2514\u2500\u2500 quant.txt \u2502 \u2502 \u251c\u2500\u2500 STAR1p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p1.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T_p1.SJ.out.tab \u2502 \u2502 \u251c\u2500\u2500 STAR2p \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.ERCC.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.hg38.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.MN485971.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_000898.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001664.4.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_001716.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_006273.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_007605.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_009333.1.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.NC_045512.2.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.readids \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T.BSJ.rRNA.bw \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Aligned.sortedByCoord.out.bam.bai \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Chimeric.out.junction \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.final.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.out \u2502 \u2502 \u2502 \u251c\u2500\u2500 GI1_T_p2.Log.progress.out \u2502 \u2502 \u2502 \u2514\u2500\u2500 GI1_T_p2.SJ.out.tab \u2502 \u2502 \u2514\u2500\u2500 trim \u2502 \u2502 \u251c\u2500\u2500 GI1_T.R1.trim.fastq.gz \u2502 \u2502 \u2514\u2500\u2500 GI1_T.R2.trim.fastq.gz \u2502 \u2514\u2500\u2500 pass1.out.tab \u251c\u2500\u2500 samples.tsv \u251c\u2500\u2500 stats \u2502 \u251c\u2500\u2500 snakemake.log.20210204103112.gz \u2502 \u2514\u2500\u2500 snakemake.stats.20210204103112.gz \u251c\u2500\u2500 submit_script.sbatch","title":"Run"},{"location":"tutorial/#runlocal","text":"If you have grabbed an interactive node using sinteractive and have a small test dataset in the samples.tsv and simply want to quickly check if everything works as expected. You can run locally , i.e. directly on the interactive node without submitting to the cluster using: % bash /data/Ziegelbauer_lab/Pipelines/circRNA/v0.4.0/run_circrna_daq.sh runlocal /scratch/circRNA_daq_test This is only for testing purposes, do not use it for running 10s of samples as you will be soon timed out of the interactive node.","title":"Runlocal"},{"location":"versions/","text":"circRNA DAQ Pipeline Version/Release highlights v0.1.0 base version PE only support v0.2.x SE support added .. PE/SE samples handled concurrently envmodules used in Snakemake in place of module load statements v0.3.x Lookup table for hg38 to hg19 circRNA annotations is updated... this eliminate one-to-many hits from the previous version BSJs extracted as different bam file. flowchart added adding slurmjobid to log/err file names v0.3.1 has significant (>10X) performance improvements at BSJ bam creation v0.3.3 splits BSJ bams into human and viral bams, and also converts them to bigwigs v0.3.4 adds hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC reference (source:Sarah) v0.4.x CLEAR added. wrapper script ( run_circrna_daq.sh ) added for local and cluster execution. \"spliced reads only\" bam created and split by regions v0.5.x run_clear is now set to True (as default) circ_quant replaces clear_quant in the CLEAR rule. In order words, we are reusing the STAR alignment file and the circExplorer2 output file for running CLEAR. No need to run HISAT2 and TopHat (fusion-search with Bowtie1). This is much quicker. Using picard to estimate duplicates using MarkDuplicates Generating a per-run multiqc HTML report Using eulerr R package to generate CIRI-CircExplorer circRNA Venn diagrams and include them in the mulitqc report Gather per job cluster metadata like queue time, run time, job state etc. Stats are compiled in HPC_summary file CLEAR pipeline quant.txt file is annotated for known circRNAs","title":"Versions"},{"location":"versions/#circrna-daq-pipeline","text":"","title":"circRNA DAQ Pipeline"},{"location":"versions/#versionrelease-highlights","text":"","title":"Version/Release highlights"},{"location":"versions/#v010","text":"base version PE only support","title":"v0.1.0"},{"location":"versions/#v02x","text":"SE support added .. PE/SE samples handled concurrently envmodules used in Snakemake in place of module load statements","title":"v0.2.x"},{"location":"versions/#v03x","text":"Lookup table for hg38 to hg19 circRNA annotations is updated... this eliminate one-to-many hits from the previous version BSJs extracted as different bam file. flowchart added adding slurmjobid to log/err file names v0.3.1 has significant (>10X) performance improvements at BSJ bam creation v0.3.3 splits BSJ bams into human and viral bams, and also converts them to bigwigs v0.3.4 adds hg38_rRNA_masked_plus_rRNA_plus_viruses_plus_ERCC reference (source:Sarah)","title":"v0.3.x"},{"location":"versions/#v04x","text":"CLEAR added. wrapper script ( run_circrna_daq.sh ) added for local and cluster execution. \"spliced reads only\" bam created and split by regions","title":"v0.4.x"},{"location":"versions/#v05x","text":"run_clear is now set to True (as default) circ_quant replaces clear_quant in the CLEAR rule. In order words, we are reusing the STAR alignment file and the circExplorer2 output file for running CLEAR. No need to run HISAT2 and TopHat (fusion-search with Bowtie1). This is much quicker. Using picard to estimate duplicates using MarkDuplicates Generating a per-run multiqc HTML report Using eulerr R package to generate CIRI-CircExplorer circRNA Venn diagrams and include them in the mulitqc report Gather per job cluster metadata like queue time, run time, job state etc. Stats are compiled in HPC_summary file CLEAR pipeline quant.txt file is annotated for known circRNAs","title":"v0.5.x"}]}